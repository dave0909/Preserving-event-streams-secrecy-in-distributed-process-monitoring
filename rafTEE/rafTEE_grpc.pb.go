// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rafTEE

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RafTEErpcServiceClient is the client API for RafTEErpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RafTEErpcServiceClient interface {
	RequestVoteRPC(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReponse, error)
	AppendEntriesRPC(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
}

type rafTEErpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRafTEErpcServiceClient(cc grpc.ClientConnInterface) RafTEErpcServiceClient {
	return &rafTEErpcServiceClient{cc}
}

func (c *rafTEErpcServiceClient) RequestVoteRPC(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReponse, error) {
	out := new(VoteReponse)
	err := c.cc.Invoke(ctx, "/rafTEE.RafTEErpcService/RequestVoteRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rafTEErpcServiceClient) AppendEntriesRPC(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := c.cc.Invoke(ctx, "/rafTEE.RafTEErpcService/AppendEntriesRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RafTEErpcServiceServer is the server API for RafTEErpcService service.
// All implementations must embed UnimplementedRafTEErpcServiceServer
// for forward compatibility
type RafTEErpcServiceServer interface {
	RequestVoteRPC(context.Context, *VoteRequest) (*VoteReponse, error)
	AppendEntriesRPC(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	mustEmbedUnimplementedRafTEErpcServiceServer()
}

// UnimplementedRafTEErpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRafTEErpcServiceServer struct {
}

func (UnimplementedRafTEErpcServiceServer) RequestVoteRPC(context.Context, *VoteRequest) (*VoteReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVoteRPC not implemented")
}
func (UnimplementedRafTEErpcServiceServer) AppendEntriesRPC(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntriesRPC not implemented")
}
func (UnimplementedRafTEErpcServiceServer) mustEmbedUnimplementedRafTEErpcServiceServer() {}

// UnsafeRafTEErpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RafTEErpcServiceServer will
// result in compilation errors.
type UnsafeRafTEErpcServiceServer interface {
	mustEmbedUnimplementedRafTEErpcServiceServer()
}

func RegisterRafTEErpcServiceServer(s grpc.ServiceRegistrar, srv RafTEErpcServiceServer) {
	s.RegisterService(&RafTEErpcService_ServiceDesc, srv)
}

func _RafTEErpcService_RequestVoteRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RafTEErpcServiceServer).RequestVoteRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafTEE.RafTEErpcService/RequestVoteRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RafTEErpcServiceServer).RequestVoteRPC(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RafTEErpcService_AppendEntriesRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RafTEErpcServiceServer).AppendEntriesRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rafTEE.RafTEErpcService/AppendEntriesRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RafTEErpcServiceServer).AppendEntriesRPC(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RafTEErpcService_ServiceDesc is the grpc.ServiceDesc for RafTEErpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RafTEErpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rafTEE.RafTEErpcService",
	HandlerType: (*RafTEErpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVoteRPC",
			Handler:    _RafTEErpcService_RequestVoteRPC_Handler,
		},
		{
			MethodName: "AppendEntriesRPC",
			Handler:    _RafTEErpcService_AppendEntriesRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rafTEE.proto",
}
